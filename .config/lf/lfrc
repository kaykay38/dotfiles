
set previewer ~/.config/lf/preview
set preview true
set hidden true
set drawbox true
set icons true
set ignorecase true

# Custom Functions
cmd bulk-rename ${{
	index=$(mktemp /tmp/lf-bulk-rename-index.XXXXXXXXXX)
	if [ -n "${fs}" ]; then
		echo "$fs" > $index
	else
		echo "$(ls "$(dirname $f)" | tr ' ' "\n")" > $index
	fi
	index_edit=$(mktemp /tmp/lf-bulk-rename.XXXXXXXXXX)
	cat $index > $index_edit
	$EDITOR $index_edit
	if [ $(cat $index | wc -l) -eq $(cat $index_edit | wc -l) ]; then
		max=$(($(cat $index | wc -l)+1))
		counter=1
		while [ $counter -le $max ]; do
			a="$(cat $index | sed "${counter}q;d")"
			b="$(cat $index_edit | sed "${counter}q;d")"
			counter=$(($counter+1))
			
			[ "$a" = "$b" ] && continue
			[ -e "$b" ] && echo "File exists: $b" && continue
			mv "$a" "$b"
		done
	else
		echo "Number of lines must stay the same"
	fi
	rm $index $index_edit
}}

cmd copy-path ${{
    echo "$fx" | pbcopy
}}

cmd open ${{
    for file in "$fx"
    do
        if [[ $file = *.pynb ]] || [[ $file = *.ipynb ]]; then
            url="http://localhost:8888/notebooks/$(basename "$file")"
            echo "$url"
            [[ -z "$(pgrep -f 'jupyter-notebook')" ]] && jupyter notebook 2>/dev/null 1>/dev/null&
            open "$url" || xdg-open "$url"
        else
            case $(file --mime-type "$file" -bL) in
                text/*|application/json) $EDITOR "$file";;
                *) open "$file" ;;
            esac
        fi
    done
}}

# cmd open-with %printf "Open with: " && read ans && printf "Opening with $ans" && $ans "$f" 2>/dev/null & disown "%$ans"
cmd open-with %printf "Open with: " && read ans && printf "Opening with $ans\n" && exec-disown $ans "$f" 2>/dev/null

cmd mkfile %printf "File Name: " && read ans && $EDITOR $ans
cmd sudo-mkfile ${{printf "File Name: "; read ans && sudo touch $ans}}

cmd mkdir %printf "Directory Name: " && read ans && mkdir -p $ans
cmd sudo-mkfile ${{printf "Directory Name: "; read ans && sudo mkdir -p $ans}}

cmd chmod ${{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done

  lf -remote 'send reload'
}}

cmd fzf-jump ${{
  res="$(find . -maxdepth 3 2>/dev/null | fzf --preview='bat --color always --style plain {}' --reverse --header='Jump to location')"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
    lf -remote 'send reload'
}}

cmd zip %zip -r "$f" "$f"
cmd tar %tar cvf "$f.tar" "$f"
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"

# Trash cli bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    trash "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
    lf -remote 'send reload'
}}

cmd clear-trash %printf "Empty trash? (yes/no): " && read ans && [ $ans = "yes" ] && rm -rf ~/.Trash/* && printf "Trash emptied" && lf -remote 'send reload'

cmd symlink %printf 'Symlink selected to: ' && read ans && ln -s $fs $ans && for file in $fs; do printf "Symlinked $file -> $ans\n"; done && lf -remote 'send unselect'
cmd sudo-symlink ${{
    printf 'Symlink selected to: ' && read ans && sudo ln -s $fs $ans
    for file in $fs; do
        printf "Symlinked $file -> $ans\n"
    done
    lf -remote 'send unselect'
}}

# Bindings
# Remove some defaults
map m
map o
map n
map "'"
map '"'
map d
map c
map e
map f
map y

# map j
# map k
# map l

map j down
map k up
map l open

# Colemak
# map n down
# map e up
# map i open

map o open-with

# File Openers
map E $$EDITOR "$f"
# map u $view "$f"

# Archive Mappings
map az zip
map at tar
map ag targz
map ab targz
map au unarchive

# Trash Mappings
map dt trash
map Tc clear-trash
map T. cd ~/.Trash

# fzf Mapping
map f fzf-jump

# Basic Functions
map . set hidden!
map DD delete
map dd cut
map xx cut
map yy copy
map yp copy-path
map <enter> open
map mf mkfile
map mr sudomkfile
map md mkdir
map ch chmod
map r rename
map br bulk-rename
map H top
map L bottom
map R reload
map C clear
map U unselect

# Movement

map gp cd ~/Pictures
map gd cd ~/Downloads

map gs cd ~/Scripts

map go cd ~/OneDrive
map gt cd ~/OneDrive/CurrTextbooks
map gq. cd ~/OneDrive/2021-22Q2Winter
map gqw cd ~/OneDrive/2021-22Q2Winter/CSCD378-WebDev
map gqm cd ~/OneDrive/2021-22Q2Winter/CSCD496-MachineLearning
map gqs cd ~/OneDrive/2021-22Q2Winter/CSCD488-SeniorProject
map gqa cd ~/OneDrive/2021-22Q2Winter/CSCD320-Algorithms
map gc. cd ~/OneDrive/CodeWorkspace
map gcj cd ~/OneDrive/CodeWorkspace/Java
map gcp cd ~/OneDrive/CodeWorkspace/Python
map gcn cd ~/OneDrive/CodeWorkspace/NET

map gC. cd ~/.config
map gCl cd ~/.config/lf
map gCv cd ~/.config/nvim
map gl cd ~/.local

map ~ cd ~
