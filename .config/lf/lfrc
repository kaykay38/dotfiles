set previewer ~/.config/lf/preview
set preview true
set drawbox true
set icons true
set ignorecase true

# Custom Functions
cmd bulk-rename-full-path ${{
	index=$(mktemp /tmp/lf-bulk-rename-index.XXXXXXXXXX)
	if [ -n "${fs}" ]; then
		echo "$fs" > $index
	else
		exit
	fi
	index_edit=$(mktemp /tmp/lf-bulk-rename.XXXXXXXXXX)
	cp $index $index_edit
	$EDITOR $index_edit
	if [ $(cat $index | wc -l) -eq $(cat $index_edit | wc -l) ]; then
		max=$(($(cat $index | wc -l)+1))
		counter=1
		while [ $counter -lt $max ]; do
			a="$(sed "${counter}q;d" $index)"
			b="$(sed "${counter}q;d" $index_edit)"
			counter=$(($counter+1))

			[ "$a" = "$b" ] && continue
			[ -e "$b" ] && echo "File exists: $b" && continue
			mv "$a" "$b"
		done
	else
		echo "Number of lines must stay the same"
	fi
	rm $index $index_edit
}}

cmd bulk-rename-relative ${{
	index=$(mktemp /tmp/lf-bulk-rename-index.XXXXXXXXXX)
	if [ -n "${fs}" ]; then
		echo "$fs" > $index
	else
		echo "$(ls "$(dirname $f)" | tr ' ' '\n')" > $index
	fi
	index_edit=$(mktemp /tmp/lf-bulk-rename.XXXXXXXXXX)
    rev "$index" | cut -d'/' -f1  | rev > "$index_edit"
	$EDITOR $index_edit
	if [ $(cat $index | wc -l) -eq $(cat "$index_edit" | wc -l) ]; then
		max=$(($(cat $index | wc -l)+1))
		counter=1
		while [ $counter -lt $max ]; do
			fp="$(sed "${counter}q;d" $index)"
		    a="$(echo "$fp" | rev | cut -d"/" -f1 | rev)"	
			b="$(sed "${counter}q;d" $index_edit)"
		    dir="$(echo "$fp" | sed "s#$a##")"	

			[ "$a" = "$b" ] && continue
			[ -e "$b" ] && echo "File exists: $b" && continue
			mv "$fp" "$dir$b"

			counter=$(($counter+1))
		done
	else
		echo "Number of lines must stay the same"
	fi
	rm $index $index_edit
}}

cmd copy-path ${{
    [[ $(uname) = Darwin ]] && echo "$fx" | pbcopy || echo "$fx" | xclip -i -selection clipboard
}}

cmd open ${{
    if [[ $f = *.pynb ]] || [[ $f = *.ipynb ]]; then
        jupyter-notebook "$(basename $f)" 2>/dev/null &
    else
        case $(file --mime-type "$f" -bL) in
            text/html) firefox "$f" || open -a Firefox.app "$f";;
            text/*|application/json) $EDITOR "$f";;
            #application/pdf) [[ $(uname) = Darwin ]] && /Applications/Zathura.app/Contents/MacOS/zathura "$f" 2>/dev/null 1>/dev/null& disown %/Applications/Zathura.app/Contents/MacOS/zathura 2>/dev/null || zathura "f" & 2>/dev/null;;
            *) [[ $(uname) = Darwin ]] && open "$f" || xdg-open "$f"&;;
        esac
    fi
}}

cmd open-with %printf "Open with: " && read ans && printf "Opening with $ans\n" && exec-disown $ans "$f" </dev/null &>/dev/null

cmd mkfile %printf "File Name: " && read ans && touch $ans
cmd sudo-mkfile ${{printf "File Name: "; read ans && sudo touch $ans}}
cmd mkdir %printf "Directory Name: " && read ans && mkdir -p $ans

cmd sudo-mkfile ${{printf "Directory Name: "; read ans && sudo mkdir -p $ans}}

cmd chmod ${{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done

  lf -remote 'send reload'
}}

cmd fzf-jump ${{
  res="$(find . -maxdepth 3 2>/dev/null | fzf --preview='bat --color always --style plain {}' --reverse --header='Jump to location')"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
    lf -remote 'send reload'
}}

# cmd zip %zip -r "$f.zip" "$f" */

cmd zip %zip -r "$(basename "$f").zip" "$(basename "$f")"
cmd tar %tar cvf "$(basename "$f").tar" "$(basename "$f")"
cmd targz %tar cvzf "$(basename "$f").tar.gz" "$(basename "$f")"
cmd tarbz2 %tar cjvf "$(basename "$f").tar.bz2" "$(basename "$f")"

# Trash cli bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    trash "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
    lf -remote 'send reload'
}}

cmd clear-trash %printf "Empty trash? (yes/no): " && read ans && [ $ans = "yes" ] && rm -rf ~/.Trash/* && printf "Trash emptied" && lf -remote 'send reload'

cmd symlink %printf 'Symlink selected to: ' && read ans && ln -s $fs $ans && for file in $fs; do printf "Symlinked $file -> $ans\n"; done && lf -remote 'send unselect'
cmd sudo-symlink ${{
    printf 'Symlink selected to: ' && read ans && sudo ln -s $fs $ans
    for file in $fs; do
        printf "Symlinked $file -> $ans\n"
    done
    lf -remote 'send unselect'
}}

# Drag and drop
cmd drag-drop %dragon-drop "$f"
cmd drag-drop-copy %dragoncp "$f"
cmd drag-drop-download %dragondl "$f"
cmd drag-drop-move %dragonmv "$f"

# Bindings
# Remove some defaults
map m
map o
map n
map "'"
map '"'
map d
map c
map e
map f
map y

# map j
# map k
# map l

map j down
map k up
map l open

# Colemak
# map n down
# map e up
# map i open

map o open-with

# File Openers
map E $$EDITOR "$f"
# map u $view "$f"

# Archive Mappings
map az zip
map at tar
map ag targz
map ab targz
map au unarchive

# Trash Mappings
map dt trash
map Tc clear-trash
map T. cd ~/.Trash

# fzf Mapping
map f fzf-jump

# Basic Functions
map . set hidden!
map DD delete
map dd cut
map xx cut
map yy copy
map yp copy-path
map <enter> open
map mf mkfile
map mr sudomkfile
map md mkdir
map ch chmod
map r rename
map b. bulk-rename-relative
map br bulk-rename-full-path
map dr. drag-drop
map dry drag-drop-copy
map drd drag-drop-download
map drm drag-drop-move
map H top
map L bottom
map R reload
map C clear
map U unselect

# Movement
map gp cd ~/Pictures
map gd cd ~/Downloads

map gs cd ~/Scripts

map go cd ~/Documents
map gt cd ~/Documents/CurrTextbooks
map gc. cd ~/Documents/CodeWorkspace
map gcl cd ~/Documents/CodeWorkspace/LeetCode
map gcj cd ~/Documents/CodeWorkspace/Java
map gcp cd ~/Documents/CodeWorkspace/Python
map gcn cd ~/Documents/CodeWorkspace/NET

map gC. cd ~/.config
map gCl cd ~/.config/lf
map gCv cd ~/.config/lvim
map gl cd ~/.local

map ~ cd ~
